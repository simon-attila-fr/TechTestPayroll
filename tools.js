const months = require('./month.js');

// This function generates a year.
// It returns an array.
// In the array, there are nested arrays. Nested arrays represent months.
//In the nested arrays, date objects represent days.
// The objects have the following properties:
// -dayId (number), dayObj (object), weekend (boolean), workday (boolean). 

function monthsGenerator(year) {

    if (!Number.isInteger(year)){
        throw TypeError("The year should be an integer.");
    }
    // February :)
    if (year % 4 === 0) {
        months[1].days = 29;
    }
    
    let daysInMonths = [];
    let dayId = 0;
    
    for (let i = 0; i <= 11; i++) {
      daysInMonths.push([]);
      for (let j = 0; j <= months[i].days - 1; j++) {
      
       let day = new Date(`${months[i].id}-${j + 1}-${year}`);
       daysInMonths[i].push({dayId: dayId, dayObj: day, weekend: false, workday: true});
       dayId = dayId + 1;
       if (daysInMonths[i][j].dayObj.getDay() == 6 || daysInMonths[i][j].dayObj.getDay() == 0) {
         daysInMonths[i][j].weekend = true;
         daysInMonths[i][j].workday = false;
       }
      }
    }
    return daysInMonths
}

// This function defines two dates.
// It accepts two strings as arguments. Format: "mm-dd-yyyy"
// It returns an object with two properties: startingDate and endDate.

function getStartingAndEndDay(date1, date2) {

    // Error handling ------
    if (typeof date1 !== "string" || typeof date2 !== "string") {
        throw TypeError("Both of the dates should be a string in the following format: mm-dd-yyyy")
    }

    if (date1.split("-").map(e => Number(e) ? e : null).join("").length !== date1.length-2 ||
    date2.split("-").map(e => Number(e) ? e : null).join("").length !== date2.length-2) {
        throw TypeError("There should be numbers between the dashes in the following format: mm-dd-yyyy")
    }

    if (new Date(date1).toLocaleString() === "Invalid Date" || new Date(date2).toLocaleString() === "Invalid Date") {
        throw TypeError("Please verify the month and the day in your dates! Format: mm-dd-yyyy")
    }

    if (new Date(date1).toLocaleString() === "Invalid Date" || new Date(date2).toLocaleString() === "Invalid Date") {
      throw TypeError("Please verify the month and the day in your dates! Format: mm-dd-yyyy")
    }
    // -------------------

    let startingDate = new Date(date1);
    let endDate = new Date(date2);

    // Timetraveller error handling

    if (date1 > date2) {
        throw new Error("Timetraveling hasn't been invented (yet). The end of the period should be after the beginning.");
    }

    return {
      startingDate: startingDate,
      endDate: endDate
    }
  }

// This function finds one specific date in a year generated by monthsGenerator.
//It accepts two arguments: date (date object) and year (array generated by monthsGenerator).
// It returns an object from the year.
// The object have the following properties:
// -dayId (number), dayObj (object), weekend (boolean), workday (boolean). 

function findOneDate(date, year) {

    let oneDay = {};
  
    for (let i = 0; i < year.length; i++) {
      for (let j = 0; j < year[i].length; j++) {
        if (year[i][j].dayObj.getTime() == date.getTime()) {
          oneDay = year[i][j];
          return oneDay
        }
      }
    }
  
  }


// This function defines a selected period of a year.
// It accepts two arguments: startDate(date object), endDate (date object) and year
// (array generated by monthsGenerator).
// It returns an array that contains the month(s) and the day(s) of the period in question.

  function getPeriode(startDate, endDate, year) {
    let periode = [];
    let start = findOneDate(startDate, year);
    let end = findOneDate(endDate, year);
  
    for (let i = 0; i < year.length; i++) {
      for (let j = 0; j < year[i].length; j++) {
        if (year[i][j].dayId >= start.dayId && year[i][j].dayId <= end.dayId) {
          periode.push(year[i][j]);
        }
        if (year[i][j].dayId > end.dayId) {
          return periode;
        }
      }
    }
    return periode;
  }

  // This function defines the number of the different months in the period range.
  // It returnes the names of the months in the range as a stsring.

  function monthsInRange(range) {
    let months = new Set();
    range.map(e => months.add(e.dayObj.toLocaleString('default', { month: 'long' })));
    let text = "";
    for (const x of months.values()) {
        text += " " + x + ",";
    }
    return text
  }

  module.exports = {monthsGenerator, getStartingAndEndDay, findOneDate, getPeriode, monthsInRange};